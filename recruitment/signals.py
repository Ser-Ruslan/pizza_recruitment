from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from .models import (
    Application, ApplicationComment, Notification, Interview, 
    UserRole, Restaurant, QuickApplication, User, UserProfile, ApplicationStatus, Resume, InterviewStatus, Vacancy
)
from django.db import transaction
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
import string
import random

def send_notification_with_email(user, title, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ email"""
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
    Notification.objects.create(
        user=user,
        title=title,
        message=message
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π email
    send_mail(
        f'PizzaJobs - {title}',
        '',
        settings.EMAIL_HOST_USER,
        [user.email],
        fail_silently=True,
        html_message=f'''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 25px; text-align: center; border-radius: 10px 10px 0 0; }}
                .content {{ background: #f9f9f9; padding: 25px; border-radius: 0 0 10px 10px; }}
                .message-box {{ background: white; padding: 20px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #667eea; }}
                .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 14px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üçï PizzaJobs</h1>
                    <h2>{title}</h2>
                </div>
                <div class="content">
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>{user.get_full_name() or user.username}</strong>!</p>

                    <div class="message-box">
                        <p>{message}</p>
                    </div>

                    <p>–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>

                </div>
                <div class="footer">
                    <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br><strong>–ö–æ–º–∞–Ω–¥–∞ PizzaJobs</strong></p>
                    <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.</em></p>
                </div>
            </div>
        </body>
        </html>
        '''
    )

@receiver(post_save, sender=Application)
def application_notifications(sender, instance, created, **kwargs):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –±—ã—Å—Ç—Ä–æ–π –∑–∞—è–≤–∫–∏
    if created and not hasattr(instance, '_from_quick_application'):
        vacancy = instance.vacancy
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        hr_users = User.objects.filter(profile__role=UserRole.HR_MANAGER)
        for hr in hr_users:
            send_notification_with_email(
                hr,
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ ¬´{vacancy.title}¬ª",
                f"{instance.user.get_full_name()} –ø–æ–¥–∞–ª(–∞) –∑–∞—è–≤–∫—É –Ω–∞ ¬´{vacancy.title}¬ª."
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        for restaurant in vacancy.restaurants.all():
            if restaurant.manager:
                send_notification_with_email(
                    restaurant.manager,
                    f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ {vacancy.title}",
                    f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {instance.user.get_full_name()} –Ω–∞ ¬´{vacancy.title}¬ª."
                )

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è (–Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ)
    elif not created:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å
        old_status = getattr(instance, '_old_status', None)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_status and old_status != instance.status:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
                interviews = Interview.objects.filter(application=instance)

                for interview in interviews:
                    old_interview_status = interview.status

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
                    if instance.status == ApplicationStatus.REJECTED:
                        interview.status = InterviewStatus.CANCELLED
                    elif instance.status == ApplicationStatus.ACCEPTED:
                        interview.status = InterviewStatus.COMPLETED
                        interview.completed = True
                    elif instance.status == ApplicationStatus.ON_HOLD:
                        interview.status = InterviewStatus.RESCHEDULED

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if interview.status != old_interview_status:
                        interview.save()

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
                        send_notification_with_email(
                            instance.user,
                            f"–°—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω",
                            f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{instance.vacancy.title}¬ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {interview.get_status_display()}"
                        )

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
                        if interview.interviewer:
                            send_notification_with_email(
                                interview.interviewer,
                                f"–°—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω",
                                f"–°—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å {instance.user.get_full_name()} –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{instance.vacancy.title}¬ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {interview.get_status_display()}"
                            )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
                send_notification_with_email(
                    instance.user,
                    f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω—ë–Ω",
                    f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ¬´{instance.vacancy.title}¬ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {instance.get_status_display()}"
                )

@receiver(post_save, sender=Interview)
def interview_notifications(sender, instance, created, **kwargs):
    if created:
        user = instance.application.user
        send_notification_with_email(
            user,
            "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ",
            f"–î–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ ¬´{instance.application.vacancy.title}¬ª –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ {instance.date_time.strftime('%d.%m.%Y –≤ %H:%M')}."
        )
        if instance.interviewer:
            send_notification_with_email(
                instance.interviewer,
                "–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–º",
                f"–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–º –¥–ª—è {user.get_full_name()} –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{instance.application.vacancy.title}¬ª {instance.date_time.strftime('%d.%m.%Y –≤ %H:%M')}."
            )
    else:
        # –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–µ —Å–æ–∑–¥–∞–Ω–æ)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            old_interview = Interview.objects.filter(id=instance.id).exclude(id=instance.id).first()
            if old_interview and old_interview.status != instance.status:
                user = instance.application.user

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                send_notification_with_email(
                    user,
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é",
                    f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{instance.application.vacancy.title}¬ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {instance.get_status_display()}"
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
                if instance.interviewer:
                    send_notification_with_email(
                        instance.interviewer,
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é",
                        f"–°—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å {user.get_full_name()} –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{instance.application.vacancy.title}¬ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {instance.get_status_display()}"
                    )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º HR –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
                hr_users = User.objects.filter(profile__role=UserRole.HR_MANAGER)
                for hr in hr_users:
                    send_notification_with_email(
                        hr,
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è",
                        f"–°—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å {user.get_full_name()} –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ¬´{instance.application.vacancy.title}¬ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {instance.get_status_display()}"
                    )
        except:
            pass

@receiver(post_save, sender=ApplicationComment)
def comment_notifications(sender, instance, created, **kwargs):
    if created:
        application = instance.application
        author = instance.author
        author_role = author.profile.role if hasattr(author, 'profile') else None

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        if author_role == UserRole.RESTAURANT_MANAGER:
            hr_users = User.objects.filter(profile__role=UserRole.HR_MANAGER)
            for hr in hr_users:
                send_notification_with_email(
                    hr,
                    f"–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ ‚Ññ{application.id}",
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {author.get_full_name()} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ¬´{application.vacancy.title}¬ª –æ—Ç {application.user.get_full_name()}."
                )

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç HR, —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        elif author_role == UserRole.HR_MANAGER:
            for restaurant in application.vacancy.restaurants.all():
                if restaurant.manager:
                    send_notification_with_email(
                        restaurant.manager,
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ ‚Ññ{application.id}",
                        f"HR-–º–µ–Ω–µ–¥–∂–µ—Ä {author.get_full_name()} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ¬´{application.vacancy.title}¬ª –æ—Ç {application.user.get_full_name()}."
                    )

@receiver(post_save, sender=QuickApplication)
def quick_application_handler(sender, instance, created, **kwargs):
    if created:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –±—ã—Å—Ç—Ä–æ–π –∑–∞—è–≤–∫–µ
        hr_users = User.objects.filter(profile__role=UserRole.HR_MANAGER)
        for hr in hr_users:
            send_notification_with_email(
                hr,
                f"–ù–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ {instance.vacancy.title}",
                f"–ü–æ–ª—É—á–µ–Ω –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –æ—Ç {instance.full_name} –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é {instance.vacancy.title}."
            )

    # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞

@receiver(post_save, sender=Vacancy)
def vacancy_notifications(sender, instance, created, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    if created and instance.is_active:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        candidates = User.objects.filter(profile__role=UserRole.CANDIDATE)
        
        for candidate in candidates:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ—Ñ–∏–ª—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            profile = candidate.profile
            should_notify = False
            
            # –ï—Å–ª–∏ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –∂–µ–ª–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ –æ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–∏–ø–æ–º –≤–∞–∫–∞–Ω—Å–∏–∏
            if profile.desired_position and instance.position_type.title.lower() in profile.desired_position.lower():
                should_notify = True
            
            # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            elif candidate.applications.filter(vacancy__position_type=instance.position_type).exists():
                should_notify = True
            
            # –ï—Å–ª–∏ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å—Ç—å —Ä–µ–∑—é–º–µ (–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫)
            elif candidate.resumes.filter(is_active=True).exists():
                should_notify = True
            
            if should_notify:
                restaurant_names = ', '.join([r.name for r in instance.restaurants.all()[:3]])
                if instance.restaurants.count() > 3:
                    restaurant_names += f" –∏ –µ—â—ë {instance.restaurants.count() - 3}"
                
                send_notification_with_email(
                    candidate,
                    f"–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {instance.title}",
                    f"–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è '{instance.title}' –≤ {restaurant_names}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç!"
                )

@receiver(pre_save, sender=Application)
def store_old_application_status(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ post_save"""
    if instance.pk:
        try:
            old_instance = Application.objects.get(pk=instance.pk)
            instance._old_status = old_instance.status
        except Application.DoesNotExist:
            instance._old_status = None
    else:
        instance._old_status = None